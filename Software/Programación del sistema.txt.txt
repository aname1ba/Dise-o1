#define sensorSueloPinAnalogico A0
#define sensorLluviaPinDigitalPower 8
#define sensorNivelAguaPinDigital 13
#define relayPinDigital 9
#define pulsador2 2
#define pulsador3 3
#define pulsador4 4
#define led5 5
#define led6 6
#define led7 7

int prevpul2 = 2, prespul2 = 2, prevpul3 = 3, prespul3 = 3, prevpul4 = 4, prespul4 = 4;
int status1 = LOW, status2 = LOW, status3 = LOW;

int contadorHoraSinLluvia = 0;
int contadorTiempoLluvia = 0;
int intervaloRiego = 0;
String cultivo = "";
long tiempoConLluvia, tiempoSinLluvia, contadorSensorLluvia;

void setup() {
  pinMode(relayPinDigital, OUTPUT);
  desactivarRiegoAutomatico();
  pinMode(sensorNivelAguaPinDigital, INPUT);
  pinMode(sensorLluviaPinDigitalPower, INPUT);
  pinMode(led5, OUTPUT);
  pinMode(led6, OUTPUT);
  pinMode(led7, OUTPUT);
  pinMode(pulsador2, INPUT_PULLUP);
  pinMode(pulsador3, INPUT_PULLUP);
  pinMode(pulsador4, INPUT_PULLUP);
  prespul2 = digitalRead(pulsador2);
  prespul3 = digitalRead(pulsador3);
  prespul4 = digitalRead(pulsador4);
  tiempoConLluvia = (long)(0);
  tiempoSinLluvia = (long)(0);
  contadorSensorLluvia = (long)(0);
  Serial.begin(9600);
}

void loop() {
  prevpul2 = prespul2;
  prespul2 = digitalRead(pulsador2);
  prevpul3 = prespul3;
  prespul3 = digitalRead(pulsador3);
  prevpul4 = prespul4;
  prespul4 = digitalRead(pulsador4);
  while (cultivo == "") {
    if (prevpul2 == HIGH && prespul2 == LOW) {
      cultivo = "Papa";
      status1 = !status1;
      digitalWrite(led5, status1);
      digitalWrite(led6, LOW);
      digitalWrite(led7, LOW);
    }
    if (prevpul3 == HIGH && prespul3 == LOW) {
      cultivo = "Yuca";
      status2 = !status2;
      digitalWrite(led6, status2);
      digitalWrite(led5, LOW);
      digitalWrite(led7, LOW);
    }
    if (prevpul4 == HIGH && prespul4 == LOW) {
      cultivo = "Cañihua";
      status3 = !status3;
      digitalWrite(led7, status3);
      digitalWrite(led5, LOW);
      digitalWrite(led6, LOW);
    }
  }
  Serial.println(cultivo);
  float HumedadSuelo = map(analogRead(sensorSueloPinAnalogico), 0, 1023, 100, 0);
  Serial.print("Humedad suelo: ");
  Serial.print(HumedadSuelo);
  Serial.println(" %");

  int HumedadAmbiente = readSensor();
  Serial.print("Valor del sensor: ");
  Serial.println(HumedadAmbiente);
  if (HumedadAmbiente == 0) {
    Serial.println("No llueve");
  } else {
    Serial.println("Lloviendo");
  }

  int NivelAgua = nivelAgua();
  if (NivelAgua == 0) {
    Serial.print("Nivel de agua regular: ");
    Serial.println(NivelAgua);
  } else {
    Serial.print("Nivel de agua baja: ");
    Serial.println(NivelAgua);
  }

  float hu_minima = 0.0, hu_necesaria = 0.0, hu_optima = 0.0;
  if (cultivo == "Papa") {
    hu_minima = 9.36;
    hu_necesaria = 19.29;
    hu_optima = 29.22;
    intervaloRiego = 12;
    verificarLluvia(HumedadAmbiente, intervaloRiego, HumedadSuelo, hu_minima, hu_necesaria, hu_optima);
  } else if (cultivo == "Yuca") {
    hu_minima = 9.36;
    hu_necesaria = 13.25;
    hu_optima = 17.14;
    intervaloRiego = 14;
    verificarLluvia(HumedadAmbiente, intervaloRiego, HumedadSuelo, hu_minima, hu_necesaria, hu_optima);
  } else {
    hu_minima = 13.12;
    hu_necesaria = 17.13;
    hu_optima = 21.15;
    intervaloRiego = 2;
    verificarLluvia(HumedadAmbiente, intervaloRiego, HumedadSuelo, hu_minima, hu_necesaria, hu_optima);
  }
  delay(1000);
}

int readSensor() {
  return digitalRead(sensorLluviaPinDigitalPower);
}

void activarRiegoAutomatico() {
  digitalWrite(relayPinDigital, HIGH);
  Serial.println("Válvula activada");
  delay(2000);
}

void desactivarRiegoAutomatico() {
  digitalWrite(relayPinDigital, LOW);
  Serial.println("Válvula desactivada");
  delay(2000);
}

void humedadNecesaria(float hum_suelo, float humedad_necesaria) {
  if (hum_suelo <= humedad_necesaria) {
    activarRiegoAutomatico();
  } else {
    desactivarRiegoAutomatico();
  }

  if (digitalRead(relayPinDigital) == HIGH) {
    Serial.println("Abrir válvula");
    if (nivelAgua() == 0) {
      humedadNecesaria(hum_suelo, humedad_necesaria);
    }
  } else {
    Serial.println("Cerrar válvula");
  }
}

void humedadOptima(float hum_suelo, float hum_necesaria, float humedad_optima) {
  if (hum_suelo >= humedad_optima) {
    desactivarRiegoAutomatico();
  } else {
    activarRiegoAutomatico();
  }

  if (digitalRead(relayPinDigital) == HIGH) {
    Serial.println("Abrir válvula");
    if (nivelAgua() == 0) {
      humedadOptima(hum_suelo, hum_necesaria, humedad_optima);
    } else {
      humedadNecesaria(hum_suelo, hum_necesaria);
    }
  } else {
    Serial.println("Cerrar válvula");
  }
}

int nivelAgua() {
  return digitalRead(sensorNivelAguaPinDigital);
}

void humedadMinima(float hum_suelo, float hum_minima, float hum_necesaria, float hum_optima) {
  if (hum_suelo <= hum_minima) {
    if (nivelAgua() == 0) {
      humedadOptima(hum_suelo, hum_necesaria, hum_optima);
    } else {
      humedadNecesaria(hum_suelo, hum_necesaria);
    }
  } else {
    desactivarRiegoAutomatico();
    humedadMinima(hum_suelo, hum_minima, hum_necesaria, hum_optima);
  }
}

void verificarLluvia(int hum_ambiente, int intervalo_riego, float h_suelo, float h_minima, float h_necesaria, float h_optima) {
  if (hum_ambiente == 1) {
    tiempoConLluvia = millis();
    if (tiempoConLluvia >= (10 * 3600)) {
      tiempoSinLluvia = (long)(0);
      contadorSensorLluvia = (long)(0);
      verificarLluvia(hum_ambiente, intervalo_riego, h_suelo, h_minima, h_necesaria, h_optima);
    } else {
      verificarLluvia(hum_ambiente, intervalo_riego, h_suelo, h_minima, h_necesaria, h_optima);
    }
  } else {
    tiempoSinLluvia = millis();
    if (tiempoSinLluvia == (24 * 3600)) {
      contadorSensorLluvia = millis();
      if (contadorSensorLluvia == intervalo_riego) {
        humedadMinima(h_suelo, h_minima, h_necesaria, h_optima);
      } else {
        tiempoSinLluvia = (long)(0);
        tiempoConLluvia = (long)(0);
        verificarLluvia(hum_ambiente, intervalo_riego, h_suelo, h_minima, h_necesaria, h_optima);
      }
    }
  }
}
